version: '3.8'

services:
  # Python core service - Main Profil3r application
  profil3r-core:
    build:
      context: .
      dockerfile: docker/python.dockerfile
    container_name: profil3r-core
    restart: unless-stopped
    environment:
      - PYTHONPATH=/app
      - CONFIG_FILE=/app/config.json
    volumes:
      - ./logs:/app/logs
      - ./results:/app/results
      - ./config:/app/config
      - profil3r-data:/app/data
    networks:
      - profil3r-network
    depends_on:
      - js-tools
      - php-tools
      - ruby-reporter

  # JavaScript tools service
  js-tools:
    build:
      context: .
      dockerfile: docker/node.dockerfile
    container_name: profil3r-js-tools
    restart: unless-stopped
    environment:
      - NODE_ENV=production
      - CONFIG_FILE=/app/config.json
    volumes:
      - ./logs:/app/logs
      - ./results:/app/results
      - ./config:/app/config
      - profil3r-data:/app/data
    ports:
      - '3000:3000'
    networks:
      - profil3r-network

  # PHP scripts service
  php-tools:
    build:
      context: .
      dockerfile: docker/php.dockerfile
    container_name: profil3r-php-tools
    restart: unless-stopped
    environment:
      - PHP_MEMORY_LIMIT=256M
      - PHP_MAX_EXECUTION_TIME=300
      - CONFIG_FILE=/app/config.json
    volumes:
      - ./logs:/app/logs
      - ./results:/app/results
      - ./config:/app/config
      - profil3r-data:/app/data
    networks:
      - profil3r-network

  # Ruby reporter service
  ruby-reporter:
    build:
      context: .
      dockerfile: docker/ruby.dockerfile
    container_name: profil3r-ruby-reporter
    restart: unless-stopped
    environment:
      - BUNDLE_PATH=/usr/local/bundle
      - CONFIG_FILE=/app/config.json
    volumes:
      - ./logs:/app/logs
      - ./results:/app/results
      - ./config:/app/config
      - profil3r-data:/app/data
    networks:
      - profil3r-network

  # Optional: Redis for caching and session management
  redis:
    image: redis:7-alpine
    container_name: profil3r-redis
    restart: unless-stopped
    command: redis-server --appendonly yes
    volumes:
      - redis-data:/data
    ports:
      - '6379:6379'
    networks:
      - profil3r-network
    profiles:
      - cache

  # Optional: PostgreSQL for data persistence
  postgres:
    image: postgres:15-alpine
    container_name: profil3r-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=profil3r
      - POSTGRES_USER=profil3r
      - POSTGRES_PASSWORD=profil3r_password
    volumes:
      - postgres-data:/var/lib/postgresql/data
      - ./schema:/docker-entrypoint-initdb.d
    ports:
      - '5432:5432'
    networks:
      - profil3r-network
    profiles:
      - database

  # Optional: Nginx reverse proxy
  nginx:
    image: nginx:alpine
    container_name: profil3r-nginx
    restart: unless-stopped
    ports:
      - '80:80'
      - '443:443'
    volumes:
      - ./nginx.conf:/etc/nginx/nginx.conf:ro
      - ./ssl:/etc/nginx/ssl:ro
      - ./logs:/var/log/nginx
    depends_on:
      - profil3r-core
      - js-tools
    networks:
      - profil3r-network
    profiles:
      - proxy

  # Prometheus for monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: profil3r-prometheus
    restart: unless-stopped
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/usr/share/prometheus/console_libraries'
      - '--web.console.templates=/usr/share/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    ports:
      - '9090:9090'
    networks:
      - profil3r-network
    profiles:
      - monitoring

  # Grafana for visualization
  grafana:
    image: grafana/grafana:latest
    container_name: profil3r-grafana
    restart: unless-stopped
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=profil3r
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana-data:/var/lib/grafana
      - ./grafana/provisioning:/etc/grafana/provisioning
    ports:
      - '3001:3000'
    networks:
      - profil3r-network
    profiles:
      - monitoring

  # AlertManager for alerts
  alertmanager:
    image: prom/alertmanager:latest
    container_name: profil3r-alertmanager
    restart: unless-stopped
    volumes:
      - ./alertmanager:/etc/alertmanager
      - alertmanager-data:/alertmanager
    command:
      - '--config.file=/etc/alertmanager/alertmanager.yml'
      - '--storage.path=/alertmanager'
      - '--web.external-url=http://localhost:9093'
    ports:
      - '9093:9093'
    networks:
      - profil3r-network
    profiles:
      - monitoring

  # Watchtower for auto-updates
  watchtower:
    image: containrrr/watchtower:latest
    container_name: profil3r-watchtower
    restart: unless-stopped
    volumes:
      - /var/run/docker.sock:/var/run/docker.sock
    command: --interval 30 --cleanup
    environment:
      - WATCHTOWER_NOTIFICATIONS=slack
      - WATCHTOWER_NOTIFICATION_SLACK_HOOK_URL=${SLACK_WEBHOOK_URL}
      - WATCHTOWER_NOTIFICATION_SLACK_IDENTIFIER=profil3r-watchtower
    networks:
      - profil3r-network

volumes:
  profil3r-data:
    driver: local
  redis-data:
    driver: local
  postgres-data:
    driver: local
  prometheus-data:
    driver: local
  grafana-data:
    driver: local
  alertmanager-data:
    driver: local

networks:
  profil3r-network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
