name: Release

on:
  push:
    branches:
      - main
      - develop
  workflow_dispatch:

permissions:
  contents: write
  issues: write
  pull-requests: write

jobs:
  release:
    runs-on: ubuntu-latest
    if: github.repository_owner == 'x' # Replace with your GitHub username/organization
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          persist-credentials: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          npm install -g semantic-release
          npm install --save-dev @semantic-release/changelog @semantic-release/git @semantic-release/github @semantic-release/npm conventional-changelog-conventionalcommits

      - name: Verify the integrity of provenance attestations and registry signatures for installed dependencies
        run: npm audit signatures

      - name: Setup Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.9'

      - name: Install Python dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run tests
        run: |
          # Run unit tests
          python -m pytest tests/unit/ -v || true

          # Run linting
          npm run lint || true

          # Run formatting checks
          npm run format || true

      - name: Create empty CHANGELOG.md if it doesn't exist
        run: |
          if [ ! -f CHANGELOG.md ]; then
            echo "# Changelog" > CHANGELOG.md
            echo "" >> CHANGELOG.md
            echo "All notable changes to this project will be documented in this file. See [Conventional Commits](https://conventionalcommits.org) for commit guidelines." >> CHANGELOG.md
          fi

      - name: Release
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}
        run: |
          git config --global user.name "semantic-release-bot"
          git config --global user.email "semantic-release-bot@martynus.net"
          npx semantic-release

  # Auto-create PR for Dependabot updates after CI passes
  dependabot-auto-pr:
    runs-on: ubuntu-latest
    if: github.actor == 'dependabot[bot]'
    needs: []
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: Enable auto-merge for Dependabot PRs
        run: |
          if [ "${{ github.event_name }}" == "pull_request" ]; then
            gh pr merge --auto --squash "${{ github.event.number }}"
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  # Enforce conventional commits
  conventional-commits:
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'
    steps:
      - name: Checkout
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install commitlint
        run: |
          npm install -g @commitlint/cli @commitlint/config-conventional

      - name: Validate PR title follows conventional commits
        run: |
          echo "${{ github.event.pull_request.title }}" | npx commitlint --verbose

      - name: Validate commit messages
        run: |
          npx commitlint --from ${{ github.event.pull_request.base.sha }} --to ${{ github.event.pull_request.head.sha }} --verbose

      - name: Comment on PR if validation fails
        if: failure()
        uses: actions/github-script@v7
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: `
              ‚ùå **Conventional Commits Validation Failed**

              This PR does not follow the conventional commits format. Please ensure:

              1. **PR Title** follows the format: \`type(scope): description\`
              2. **All commits** follow the conventional commits format

              **Valid types:** feat, fix, docs, style, refactor, perf, test, chore, ci, build, revert, deps

              **Examples:**
              - \`feat(auth): add OAuth2 authentication\`
              - \`fix(api): resolve memory leak in user service\`
              - \`docs(readme): update installation instructions\`
              - \`deps: update dependency lodash to v4.17.21\`

              For more information, see [Conventional Commits](https://conventionalcommits.org).
              `
            })
