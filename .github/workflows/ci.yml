name: CI Pipeline

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]

env:
  PYTHON_VERSION: '3.9'
  NODE_VERSION: '18'
  DOCKER_BUILDKIT: 1

jobs:
  # Unit tests run first
  unit-tests:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        service: [python, nodejs]

    steps:
      - uses: actions/checkout@v4

      - name: Lint rendered Helm YAML
        run: |
          sudo apt-get update
          sudo apt-get install -y yamllint
          curl https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3 | bash
          bash scripts/lint-helm-yaml.sh

      - name: Set up Python
        if: matrix.service == 'python'
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        if: matrix.service == 'nodejs'
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install Python dependencies
        if: matrix.service == 'python'
        run: |
          python -m pip install --upgrade pip
          pip install -r dependencies/requirements.txt
          pip install pytest pytest-cov

      - name: Install Node.js dependencies
        if: matrix.service == 'nodejs'
        run: |
          cd tools
          npm ci --prefix ../dependencies

      - name: Run Python unit tests
        if: matrix.service == 'python'
        run: |
          pytest tests/unit/ -v --cov=. --cov-report=xml

      - name: Run Node.js unit tests
        if: matrix.service == 'nodejs'
        run: |
          cd tools
          npm run test-unit

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v3
        with:
          file: ./coverage.xml
          flags: unittests
          name: codecov-umbrella

  # Integration tests run after unit tests pass
  integration-tests:
    runs-on: ubuntu-latest
    needs: unit-tests
    services:
      redis:
        image: redis:7-alpine
        ports:
          - 6379:6379
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: profil3r_test
          POSTGRES_USER: profil3r
          POSTGRES_PASSWORD: profil3r_password
        ports:
          - 5432:5432
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5

    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Install Python test dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dependencies/requirements.txt
          pip install -r tests/integration/python/requirements.txt

      - name: Install Node.js test dependencies
        run: |
          cd tests/integration/node
          npm install

      - name: Build Docker images
        run: |
          docker-compose build

      - name: Start services
        run: |
          docker-compose up -d
          sleep 30  # Wait for services to start

      - name: Wait for services to be healthy
        run: |
          # Wait for services to be ready
          timeout 120 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 2; done'
          timeout 120 bash -c 'until curl -f http://localhost:5000/health; do sleep 2; done'
          timeout 120 bash -c 'until curl -f http://localhost:8000/api/health; do sleep 2; done'

      - name: Run Python integration tests
        run: |
          cd tests/integration/python
          pytest -v --timeout=300 --tb=short
        env:
          TEST_API_TOKEN: ${{ secrets.TEST_API_TOKEN }}
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgresql://profil3r:profil3r_password@localhost:5432/profil3r_test

      - name: Run Node.js integration tests
        run: |
          cd tests/integration/node
          npm test
        env:
          TEST_API_TOKEN: ${{ secrets.TEST_API_TOKEN }}
          REDIS_URL: redis://localhost:6379
          DATABASE_URL: postgresql://profil3r:profil3r_password@localhost:5432/profil3r_test

      - name: Generate test reports
        if: always()
        run: |
          # Python test reports
          cd tests/integration/python
          pytest --html=integration-report.html --self-contained-html || true

          # Node.js test reports
          cd ../node
          npm run test:html || true

      - name: Upload test reports
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: integration-test-reports
          path: |
            tests/integration/python/integration-report.html
            tests/integration/node/test-results.html

      - name: Stop services
        if: always()
        run: |
          docker-compose down
          docker-compose rm -f

  # Cypress E2E tests run after integration tests
  cypress-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    steps:
      - uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: ${{ env.NODE_VERSION }}

      - name: Install system dependencies
        run: |
          sudo apt-get update
          sudo apt-get install -y docker-compose

      - name: Install dependencies
        run: |
          cd tools
          npm ci

      - name: Start services for E2E tests
        run: |
          docker-compose up -d
          sleep 30

      - name: Wait for services
        run: |
          timeout 120 bash -c 'until curl -f http://localhost:3000/api/health; do sleep 2; done'
          timeout 120 bash -c 'until curl -f http://localhost:5000/health; do sleep 2; done'
          timeout 120 bash -c 'until curl -f http://localhost:8000/api/health; do sleep 2; done'

      - name: Run Cypress tests
        run: |
          cd tools
          npm run test-e2e

      - name: Upload Cypress screenshots
        if: failure()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-screenshots
          path: tools/cypress/screenshots

      - name: Upload Cypress videos
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: cypress-videos
          path: tools/cypress/videos

      - name: Stop services
        if: always()
        run: |
          docker-compose down
          docker-compose rm -f

  # Security scanning
  security-scan:
    runs-on: ubuntu-latest
    needs: unit-tests
    steps:
      - uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          scan-type: 'fs'
          scan-ref: '.'
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: 'trivy-results.sarif'

  # Performance tests
  performance-tests:
    runs-on: ubuntu-latest
    needs: integration-tests
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'
    steps:
      - uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: ${{ env.PYTHON_VERSION }}

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r dependencies/requirements.txt
          pip install locust

      - name: Start services
        run: |
          docker-compose up -d
          sleep 30

      - name: Run performance tests
        run: |
          locust -f tests/performance/locustfile.py --headless --users 50 --spawn-rate 5 --run-time 2m --host=http://localhost:3000

      - name: Stop services
        if: always()
        run: |
          docker-compose down

  # Notification job
  notify:
    runs-on: ubuntu-latest
    needs: [unit-tests, integration-tests, cypress-tests, security-scan]
    if: always()
    steps:
      - name: Notify on success
        if: ${{ needs.unit-tests.result == 'success' && needs.integration-tests.result == 'success' && needs.cypress-tests.result == 'success' }}
        run: |
          echo "All tests passed! ✅"

      - name: Notify on failure
        if: ${{ needs.unit-tests.result == 'failure' || needs.integration-tests.result == 'failure' || needs.cypress-tests.result == 'failure' }}
        run: |
          echo "Tests failed! ❌"
          exit 1
